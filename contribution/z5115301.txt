Week 1:

Synthesised list of core feature requirements from brief. 
Did competitior research into ClickUp and Mondays to identify common features to a taskmaster application that were not included in said brief.
Wrote initial draft of both user stories and extensions. 
Pitched to team members.

Week 2:

Initially was proposing a React / Django / MongoDB stack.
Did initial feasability testing and found that this may be difficult given both level of familiarity in the team and time constraints.
Began exploring hooking Flask and React together as an alternative.
Looked into chatbots and webhooks for easy event triggering and to check viability. - Recalled IFTTT service.
Added some of the user stories to Jira from Google Doc.

Week 3:

Wrote Design Rationale
Pitched condensed list of core "guaranteed" extensions to team.
Wrote material clarifying how 'groups' would function in final application and the rationale behind this.
Composed both software architecture diagrams and provided justification for our chosen technology stack.

Week 4:
Tested and connected MongoDB for possible database as postgres and sql alternatives had difficulties. Got writeable cloud database set up, however likely proceeding with Justin's serverless sqlite db, so this has been shelved.

Week 5:
Refactored server.py so that db functionality was encapsulated in db.py
Began dialogueflow preliminary tests and setting up webhooks via IFTTT.

Week 6: 
Wrote basic dialogflow chatbot and sorted two way communication between chatbot.py and Google Cloud Platform.
Now working on getting a basic front end together for chatbot so that messages can be sent directly via text field.

Week 7:
Adapted route logic into helper functions for chatbot so that we wouldn't need to call the API from the API itself.

Week 8:
Wrote authentication method within chatbot, realised this was insecure and worked with Charles to reimplement chatbot with a custom visual interface (as opposed to Dialogflow's pastable iframe).

Week 9:
Finished chatbot such that tasks can be looked up by date or by range of dates, connection requests can be accepted/declined and tasks can be added. Wrote routes for dynamic estimates and busyness evaluation.

